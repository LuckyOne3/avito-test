{"version":3,"sources":["components/formInputs/formInputs.tsx","components/previewer/previewer.tsx","App.tsx","index.tsx"],"names":["FormInputs","props","useState","data","setData","handleChange","event","type","tmp","JSON","parse","stringify","reader","FileReader","onload","currentTarget","result","files","readAsDataURL","value","useEffect","updateData","className","id","onChange","htmlFor","placeholder","WrapperForBanner","styled","div","background","TextInBanner","ImgInBanner","img","HtmlForScreenShot","React","forwardRef","ref","children","Previewer","createRef","href","color","alt","src","image","language","ru","text","onClick","exportComponentAsPNG","sheet","ServerStyleSheet","html","RenderDom","renderToString","collectStyles","undefined","styleTags","getStyleTags","a","document","createElement","file","Blob","URL","createObjectURL","download","hidden","body","appendChild","click","removeChild","seal","App","dataObj","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.b9aae3ea.chunk.js","sourcesContent":["\nimport React, {useEffect, useState} from 'react';\n\ntype TData = {\n    \"image\": string,\n    \"color\": string,\n    \"text\" : string,\n    \"href\" : string\n}\ntype Props = {\n    updateData: (object:TData)=>void,\n}\n\n\nexport const FormInputs: React.FC<Props> = (props) => {\n    const [data, setData] = useState({\n        \"image\": \"\",\n        \"color\": \"\",\n        \"text\" : \"\",\n        \"href\": \"\"\n    });\n\n\n    useEffect(() => {\n        props.updateData(data)\n        // eslint-disable-next-line\n    }, [data]);\n\n\n    function handleChange(event: any, type:\"color\"|\"image\"|\"text\"|\"href\") {\n\n        let tmp:TData = JSON.parse(JSON.stringify(data));\n        if(type === \"image\"){\n            let reader = new FileReader();\n            reader.onload = (event:ProgressEvent<FileReader>) => {\n                // @ts-ignore\n                tmp[type] = event.currentTarget.result;\n                setData(tmp);\n\n\n            };\n            if(event.currentTarget.files[0]){\n                reader.readAsDataURL(event.currentTarget.files[0]);\n            }\n\n        }else{\n            tmp[type] = event.currentTarget.value;\n            setData(tmp);\n        }\n\n    }\n\n    return (\n            <div className=\"form-group container-inner\">\n                <div className=\"custom-file form-control\">\n                    <input type=\"file\" className=\"custom-file-input\" id=\"customFile\" onChange={(event) => handleChange(event,\"image\")}/>\n                        <label className=\"custom-file-label\" htmlFor=\"customFile\">Выберите задний план для баннера</label>\n                </div>\n\n                <input className=\"form-control \"  type=\"text\" placeholder=\"Цвет в формате hex (#111111) или linear-gradient()\" onChange={(event) => handleChange(event,\"color\")}/>\n                <textarea className=\"form-control\"  onChange={(event) => handleChange(event,\"text\")} placeholder=\"Текст внутри баннера\"/>\n                <input className=\"form-control \"  type=\"text\" placeholder=\"ссылка на нужную страницу страницу\" onChange={(event) => handleChange(event,\"href\")}/>\n\n\n            </div>\n    );\n}\n","import React from 'react';\n// @ts-ignore\nimport {CopyToClipboard} from 'react-copy-to-clipboard';\n// @ts-ignore\nimport Hyphenated from 'react-hyphen';\n// @ts-ignore\nimport ru from 'hyphenated-ru';\nimport {exportComponentAsPNG} from 'react-component-export-image';\nimport RenderDom from 'react-dom/server';\nimport styled from 'styled-components';\nimport {ServerStyleSheet} from 'styled-components';\n\n\ntype TData = {\n    \"image\": string,\n    \"color\": string,\n    \"text\" : string,\n    \"href\" : string\n}\n\ntype Props = {\n    data: TData\n}\ntype BackProps = {\n    background: string\n}\n\nconst WrapperForBanner = styled.div<BackProps>`\n  position: relative;\n  width: 141px;\n  height: 188px;\n  cursor: pointer;\n  margin: auto;\n  color:white;\n  text-align: left;\n  background: ${props => props.background ? props.background : `grey`};\n  border-radius: 8px;\n  \n  &:after {\n  position: absolute;\n  top: -3px;\n  right: -5px;\n  content: '';\n  width: 13px;\n  height: 13px;\n  border-radius: 50%;\n  background: #f71b47;\n  border: 3px solid #fff;\n}\n  \n\n`;\n\nconst TextInBanner = styled.div`\n\nposition: absolute;\nwidth: 121px;\n  left: 0px;\n  margin-left: 10px;\n  margin-right: 10px;\n  bottom: 16px;\n  font-size: 18px;\n  line-height: 20px;\n  max-height: 60px;\n  overflow: hidden;\n  overflow-wrap: break-word;\n  font-family: Arial, sans-serif;\n\n`;\n\nconst ImgInBanner = styled.img`\n\nheight: auto;\n    top: 10px;\n    right: 10px;\n    position: absolute;\n    max-height: 90px;\n`;\n\n\n\nconst HtmlForScreenShot = React.forwardRef<HTMLDivElement, React.HTMLProps<HTMLDivElement>>((props, ref) => (\n    <div  ref={ref} className=\"previewer-wrapper\">\n        {props.children}\n    </div>\n));\n\nexport const Previewer: React.FC<Props> = (props) => {\n\n    const DownloadHtml = () => {\n        const sheet = new ServerStyleSheet();\n        const html = RenderDom.renderToString(sheet.collectStyles(\n            <a href={props.data.href}>\n            <WrapperForBanner id='previewer' background={props.data.color}>\n                <ImgInBanner src={props.data.image || undefined}/>\n                <TextInBanner>\n                    <Hyphenated language={ru}>\n                    {props.data.text }\n                    </Hyphenated>\n                </TextInBanner>\n            </WrapperForBanner>\n            </a>\n        ));\n        const styleTags = sheet.getStyleTags() // or sheet.getStyleElement();\n        const a = document.createElement('a');\n        const file = new Blob([html, styleTags], {\n            type: 'text/html',\n        });\n        a.href = URL.createObjectURL(file);\n        a.download = 'banner';\n        a.hidden = true;\n        document.body.appendChild(a);\n        a.click();\n        document.body.removeChild(a);\n        sheet.seal()\n    }\n\n    const ref = React.createRef() as React.RefObject<HTMLDivElement>;\n\n\n    return (\n        <>\n            <HtmlForScreenShot ref={ref} >\n                <a href={props.data.href}>\n                <WrapperForBanner id='previewer' background={props.data.color}>\n                    <ImgInBanner alt='' src={props.data.image}/>\n                    <TextInBanner>\n                        <Hyphenated language={ru}>\n                            {props.data.text }\n                        </Hyphenated>\n                    </TextInBanner>\n                </WrapperForBanner>\n                </a>\n            </HtmlForScreenShot>\n            <div className=\"export\">\n                <div>\n                    <button onClick={() => exportComponentAsPNG(ref)} type=\"button\"\n                            className=\"btn btn-primary\">сохранить в png\n                    </button>\n                    <CopyToClipboard>\n                        <button type=\"button\" className=\"btn btn-success\" onClick={DownloadHtml}>скопировать баннер (html)\n                        </button>\n                    </CopyToClipboard>\n                    <CopyToClipboard text={JSON.stringify(props.data)}>\n                        <button type=\"button\" className=\"btn btn-info\">скопировать конфигурацию (json)</button>\n                    </CopyToClipboard>\n\n                </div>\n            </div>\n        </>\n    );\n\n}\n","import React, { useState } from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport {FormInputs} from \"./components/formInputs/formInputs\";\nimport {Previewer} from \"./components/previewer/previewer\";\n\ntype TData = {\n    \"image\": string,\n    \"color\": string,\n    \"text\" : string,\n    \"href\" : string\n}\n\nfunction App() {\n\n    const [data, setData] = useState({\n        \"image\": \"\",\n        \"color\": \"\",\n        \"text\" : \"\",\n        \"href\" : \"\"\n    });\n    const updateData = (dataObj:TData) => {\n        setData(dataObj)\n    }\n\n\n    return <div className=\"App\">\n        <div className=\"halfPage  form\">\n      <FormInputs updateData={updateData} />\n        </div>\n        <div className=\"halfPage\" >\n            <div className=\"container-inner\" >\n      <Previewer data={data} />\n            </div>\n        </div>\n    </div>;\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}